ECircuit. Circuit ::= "circuit" Id ":" Info "(" [Module] ")" ;
(:[]).    [Module] ::= Module;
(:).      [Module] ::= Module [Module];
rules Module ::= "module" Id ":" Info "(" [Port] Stmt ")"
    | "extmodule" Id ":" Info "(" [Port] ")" ;
(:[]).    [Port] ::= Port;
(:).      [Port] ::= Port [Port];
EPort. Port ::= Dir Id ":" Type Info ;
rules Dir ::= "input" | "output" ;
rules Type ::= "UInt" Intsize
    | "SInt" Intsize
    | "Fixed" Intsize Intsizefixed
    | "Clock"
    | "Analog" Intsize
    | "{" [Field] "}"
    | Type "[" Int "]" ;
(:[]).    [Field] ::= Field;
(:).      [Field] ::= Field [Field];
EField. Field ::= Flipliteral Id ":" Type ;
rules Flipliteral ::= "flip" | "" ;
rules Stmt ::= "wire" Id ":" Type Info
    | "reg" Id ":" Type Exp Withreset Info
    | "mem" Id ":" Info "(" 
        "data-type" "=>" Type
        "depth" "=>" Int
        "read-latency" "=>" Int
        "write-latency" "=>" Int
        "read-under-write" "=>" Ruw
        [Reader]
        [Writer]
        [Readwriter] ")"
    | "inst" Id "of" Id Info
    | "node" Id "=" Exp Info
    | Exp "<=" Exp Info
    | Exp "<-" Exp Info
    | Exp "is" "invalid" Info
    | "attach" "(" [Exp] ")" Info
    | "when" Exp ":" Info Stmt Elsestmt
    | "stop" "(" Exp "," Exp "," Int ")" Colonid Info
    | "printf" "(" Exp "," Exp "," SString "," [Exp] ")" Colonid Info
    | "skip" Info
    | "(" [Stmt] ")" ;
(:[]).    [Reader] ::= Reader;
(:).      [Reader] ::= Reader [Reader];
(:[]).    [Writer] ::= Writer;
(:).      [Writer] ::= Writer [Writer];
(:[]).    [Readwriter] ::= Readwriter;
(:).      [Readwriter] ::= Readwriter [Readwriter];
(:[]).    [Stmt] ::= Stmt;
(:).      [Stmt] ::= Stmt [Stmt];
EReader. Reader ::= "reader" "=>" Id ;
EWriter. Writer ::= "writer" "=>" Id ;
EReadWriter. Readwriter ::= "readwriter" "=>" Id ;
rules Colonid ::= ":" Id | "" ;
rules Elsestmt ::= "else" ":" Stmt | "" ;
rules Withreset ::= "(" "with" ":" "{" "reset" "=>" "(" Exp "," Exp ")" "}" ")" | "" ;
rules Ruw ::= "old" | "new" | "undefined" ;
rules Info ::= "@" "[" SString "]" | "";
rules Exp ::= "UInt" Intsize "(" Int ")"
    | "UInt" Intsize "(" SString ")"
    | "SInt" Intsize "(" Int ")"
    | "SInt" Intsize "(" SString ")"
    | Id
    | Exp "." Id
    | Exp "[" Int "]"
    | Exp "[" Exp "]"
    | "mux" "(" Exp "," Exp "," Exp ")"
    | "validif" "(" Exp "," Exp ")"
    | Primop "(" [Exp] "," [Int] ")" ;
(:[]).    [Exp] ::= Exp;
(:).      [Exp] ::= Exp [Exp];
(:[]).    [Int] ::= Int;
(:).      [Int] ::= Int [Int];
rules Primop ::= "add"
    | "sub"
    | "mul"
    | "div"
    | "mod"
    | "lt"
    | "leq"
    | "gt"
    | "geq"
    | "eq"
    | "neq"
    | "pad"
    | "asUInt"
    | "asSInt"
    | "asClock"
    | "shl"
    | "shr"
    | "dshl"
    | "dshr"
    | "cvt"
    | "neg"
    | "not"
    | "and"
    | "or"
    | "xor"
    | "andr"
    | "orr"
    | "xorr"
    | "cat"
    | "bits"
    | "head"
    | "tail" ;
Eid. Id ::= Ident;
Estring. SString ::= String;
rules Intsize ::= "<" Int ">" | "";
rules Intsizefixed ::= "<<" Int ">>" | "";
Eint. Int ::= Integer;
