ECircuit. Circuit ::= "circuit" Id ":" (Info)? "(" [Module] ")" ;
EModule. Module ::= "module" Id ":" (Info)? "(" [Port] Stmt ")"
    | "extmodule" Id ":" (Info)? "(" [Port] ")" ;
EPort. Port ::= Dir Id ":" Type (Info)? ;
EDir. Dir ::= "input" | "output" ;
EType. Type ::= "UInt" ("<" Int ">")?
    | "SInt" ("<" Int ">")?
    | "Fixed" ("<" Int ">")? ("<<" Int ">>")?
    | "Clock"
    | "Analog" ("<" Int ">")?
    | "{" [Field] "}"
    | Type "[" Int "]" ;
EField. Field ::= ("flip")? Id ":" Type ;
EStmt. Stmt ::= "wire" Id ":" Type (Info)?
    | "reg" Id ":" Type Exp ("(" "with" ":" "{" "reset" "=>" "(" Exp "," Exp ")" "}" ")")? (Info)?
    | "mem" Id ":" (Info)? "(" 
        "data-type" "=>" Type
        "depth" "=>" Int
        "read-latency" "=>" Int
        "write-latency" "=>" Int
        "read-under-write" "=>" Ruw
        ["reader" "=>" Id]
        ["writer" "=>" Id]
        ["readwriter" "=>" Id] ")"
    | "inst" Id "of" Id (Info)?
    | "node" Id "=" Exp (Info)?
    | Exp "<=" Exp (Info)?
    | Exp "<-" Exp (Info)?
    | Exp "is" "invalid" (Info)?
    | "attach" "(" [Exp] ")" (Info)?
    | "when" Exp ":" (Info)? Stmt ("else" ":" Stmt)?
    | "stop" "(" Exp "," Exp "," Int ")" ( ":" Id)? (Info)?
    | "printf" "(" Exp "," Exp "," SString "," [Exp] ")" ( ":" Id)? (Info)?
    | "skip" (Info)?
    | "(" [Stmt] ")" ;
ERuw. Ruw ::= "old" | "new" | "undefined" ;
EInfo. Info ::= "@" "[" SString "]" ;
EExp. Exp ::= "UInt" ("<" Int ">")? "(" Int ")"
    | "UInt" ("<" Int ">")? "(" SString ")"
    | "SInt" ("<" Int ">")? "(" Int ")"
    | "SInt" ("<" Int ">")? "(" SString ")"
    | Id
    | Exp "." Id
    | Exp "[" Int "]"
    | Exp "[" Exp "]"
    | "mux" "(" Exp "," Exp "," Exp ")"
    | "validif" "(" Exp "," Exp ")"
    | Primop "(" [Exp] "," [Int] ")" ;
EPrimop. Primop ::= "add"
    | "sub"
    | "mul"
    | "div"
    | "mod"
    | "lt"
    | "leq"
    | "gt"
    | "geq"
    | "eq"
    | "neq"
    | "pad"
    | "asUInt"
    | "asSInt"
    | "asClock"
    | "shl"
    | "shr"
    | "dshl"
    | "dshr"
    | "cvt"
    | "neg"
    | "not"
    | "and"
    | "or"
    | "xor"
    | "andr"
    | "orr"
    | "xorr"
    | "cat"
    | "bits"
    | "head"
    | "tail" ;
Eid. Id ::= Ident;
Estring. SString ::= String;
Eint. Int ::= Integer;
