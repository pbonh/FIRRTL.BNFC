/* This FLex file was machine-generated by the BNF converter */
%option prefix="FIRRTLFrontendyy"
%{
#include <string.h>
#include "Parser.H"
extern int FIRRTLFrontendyy_mylinenumber ;

/* BEGIN extensible string buffer */

#include "Buffer.H"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
static Buffer literal_buffer = NULL;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL CHAR CHARESC CHAREND STRING ESCAPED

%%  /* Rules. */

<YYINITIAL>":"      	 return _SYMB_0;
<YYINITIAL>"("      	 return _SYMB_1;
<YYINITIAL>")"      	 return _SYMB_2;
<YYINITIAL>"{"      	 return _SYMB_3;
<YYINITIAL>"}"      	 return _SYMB_4;
<YYINITIAL>"["      	 return _SYMB_5;
<YYINITIAL>"]"      	 return _SYMB_6;
<YYINITIAL>"data-type"      	 return _SYMB_7;
<YYINITIAL>"=>"      	 return _SYMB_8;
<YYINITIAL>"read-latency"      	 return _SYMB_9;
<YYINITIAL>"write-latency"      	 return _SYMB_10;
<YYINITIAL>"read-under-write"      	 return _SYMB_11;
<YYINITIAL>"="      	 return _SYMB_12;
<YYINITIAL>"<="      	 return _SYMB_13;
<YYINITIAL>"<-"      	 return _SYMB_14;
<YYINITIAL>","      	 return _SYMB_15;
<YYINITIAL>"@"      	 return _SYMB_16;
<YYINITIAL>"."      	 return _SYMB_17;
<YYINITIAL>"<"      	 return _SYMB_18;
<YYINITIAL>">"      	 return _SYMB_19;
<YYINITIAL>"<<"      	 return _SYMB_20;
<YYINITIAL>">>"      	 return _SYMB_21;
<YYINITIAL>"Analog"      	 return _SYMB_22;
<YYINITIAL>"Clock"      	 return _SYMB_23;
<YYINITIAL>"Fixed"      	 return _SYMB_24;
<YYINITIAL>"SInt"      	 return _SYMB_25;
<YYINITIAL>"UInt"      	 return _SYMB_26;
<YYINITIAL>"add"      	 return _SYMB_27;
<YYINITIAL>"and"      	 return _SYMB_28;
<YYINITIAL>"andr"      	 return _SYMB_29;
<YYINITIAL>"asClock"      	 return _SYMB_30;
<YYINITIAL>"asSInt"      	 return _SYMB_31;
<YYINITIAL>"asUInt"      	 return _SYMB_32;
<YYINITIAL>"attach"      	 return _SYMB_33;
<YYINITIAL>"bits"      	 return _SYMB_34;
<YYINITIAL>"cat"      	 return _SYMB_35;
<YYINITIAL>"circuit"      	 return _SYMB_36;
<YYINITIAL>"cvt"      	 return _SYMB_37;
<YYINITIAL>"depth"      	 return _SYMB_38;
<YYINITIAL>"div"      	 return _SYMB_39;
<YYINITIAL>"dshl"      	 return _SYMB_40;
<YYINITIAL>"dshr"      	 return _SYMB_41;
<YYINITIAL>"else"      	 return _SYMB_42;
<YYINITIAL>"eq"      	 return _SYMB_43;
<YYINITIAL>"extmodule"      	 return _SYMB_44;
<YYINITIAL>"flip"      	 return _SYMB_45;
<YYINITIAL>"geq"      	 return _SYMB_46;
<YYINITIAL>"gt"      	 return _SYMB_47;
<YYINITIAL>"head"      	 return _SYMB_48;
<YYINITIAL>"input"      	 return _SYMB_49;
<YYINITIAL>"inst"      	 return _SYMB_50;
<YYINITIAL>"invalid"      	 return _SYMB_51;
<YYINITIAL>"is"      	 return _SYMB_52;
<YYINITIAL>"leq"      	 return _SYMB_53;
<YYINITIAL>"lt"      	 return _SYMB_54;
<YYINITIAL>"mem"      	 return _SYMB_55;
<YYINITIAL>"mod"      	 return _SYMB_56;
<YYINITIAL>"module"      	 return _SYMB_57;
<YYINITIAL>"mul"      	 return _SYMB_58;
<YYINITIAL>"mux"      	 return _SYMB_59;
<YYINITIAL>"neg"      	 return _SYMB_60;
<YYINITIAL>"neq"      	 return _SYMB_61;
<YYINITIAL>"new"      	 return _SYMB_62;
<YYINITIAL>"node"      	 return _SYMB_63;
<YYINITIAL>"not"      	 return _SYMB_64;
<YYINITIAL>"of"      	 return _SYMB_65;
<YYINITIAL>"old"      	 return _SYMB_66;
<YYINITIAL>"or"      	 return _SYMB_67;
<YYINITIAL>"orr"      	 return _SYMB_68;
<YYINITIAL>"output"      	 return _SYMB_69;
<YYINITIAL>"pad"      	 return _SYMB_70;
<YYINITIAL>"printf"      	 return _SYMB_71;
<YYINITIAL>"reader"      	 return _SYMB_72;
<YYINITIAL>"readwriter"      	 return _SYMB_73;
<YYINITIAL>"reg"      	 return _SYMB_74;
<YYINITIAL>"reset"      	 return _SYMB_75;
<YYINITIAL>"shl"      	 return _SYMB_76;
<YYINITIAL>"shr"      	 return _SYMB_77;
<YYINITIAL>"skip"      	 return _SYMB_78;
<YYINITIAL>"stop"      	 return _SYMB_79;
<YYINITIAL>"sub"      	 return _SYMB_80;
<YYINITIAL>"tail"      	 return _SYMB_81;
<YYINITIAL>"undefined"      	 return _SYMB_82;
<YYINITIAL>"validif"      	 return _SYMB_83;
<YYINITIAL>"when"      	 return _SYMB_84;
<YYINITIAL>"wire"      	 return _SYMB_85;
<YYINITIAL>"with"      	 return _SYMB_86;
<YYINITIAL>"writer"      	 return _SYMB_87;
<YYINITIAL>"xor"      	 return _SYMB_88;
<YYINITIAL>"xorr"      	 return _SYMB_89;



<YYINITIAL>"\""        	 LITERAL_BUFFER_CREATE(); BEGIN STRING;
<STRING>\\             	 BEGIN ESCAPED;
<STRING>\"             	 FIRRTLFrontendyylval._string = LITERAL_BUFFER_HARVEST(); BEGIN YYINITIAL; return FIRRTLFRONTEND__STRING_;
<STRING>.              	 LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
<ESCAPED>n             	 LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
<ESCAPED>\"            	 LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
<ESCAPED>\\            	 LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
<ESCAPED>t             	 LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
<ESCAPED>.             	 LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
<STRING,ESCAPED><<EOF>>	 LITERAL_BUFFER_FREE(); return FIRRTLFRONTEND__ERROR_;
<YYINITIAL>{DIGIT}+      	 FIRRTLFrontendyylval._int = atoi(yytext); return FIRRTLFRONTEND__INTEGER_;
<YYINITIAL>{LETTER}{IDENT}*      	 FIRRTLFrontendyylval._string = strdup(yytext); return FIRRTLFRONTEND__IDENT_;
\n  ++FIRRTLFrontendyy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return FIRRTLFRONTEND__ERROR_;
%%
void FIRRTLFrontendinitialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
int yywrap(void) { return 1; }

