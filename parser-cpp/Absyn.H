#ifndef FIRRTLFRONTEND_ABSYN_HEADER
#define FIRRTLFRONTEND_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.
namespace FIRRTLFrontend
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Circuit;
class Module;
class Port;
class Dir;
class Type;
class Field;
class Flipliteral;
class Stmt;
class Reader;
class Writer;
class Readwriter;
class Colonid;
class Elsestmt;
class Withreset;
class Ruw;
class Info;
class Exp;
class Primop;
class Id;
class SString;
class Intsize;
class Intsizefixed;
class Int;
class ECircuit;
class Module1;
class Module2;
class EPort;
class Dir_input;
class Dir_output;
class Type1;
class Type2;
class Type3;
class Type_Clock;
class Type4;
class Type5;
class Type6;
class EField;
class Flipliteral_flip;
class Flipliteral_;
class Stmt1;
class Stmt2;
class Stmt3;
class Stmt4;
class Stmt5;
class Stmt6;
class Stmt7;
class Stmt8;
class Stmt9;
class Stmt10;
class Stmt11;
class Stmt12;
class Stmt13;
class Stmt14;
class EReader;
class EWriter;
class EReadWriter;
class Colonid1;
class Colonid_;
class Elsestmt1;
class Elsestmt_;
class Withreset1;
class Withreset_;
class Ruw_old;
class Ruw_new;
class Ruw_undefined;
class Info1;
class Info_;
class Exp1;
class Exp2;
class Exp3;
class Exp4;
class ExpId;
class Exp5;
class Exp6;
class Exp7;
class Exp8;
class Exp9;
class Exp10;
class Primop_add;
class Primop_sub;
class Primop_mul;
class Primop_div;
class Primop_mod;
class Primop_lt;
class Primop_leq;
class Primop_gt;
class Primop_geq;
class Primop_eq;
class Primop_neq;
class Primop_pad;
class Primop_asUInt;
class Primop_asSInt;
class Primop_asClock;
class Primop_shl;
class Primop_shr;
class Primop_dshl;
class Primop_dshr;
class Primop_cvt;
class Primop_neg;
class Primop_not;
class Primop_and;
class Primop_or;
class Primop_xor;
class Primop_andr;
class Primop_orr;
class Primop_xorr;
class Primop_cat;
class Primop_bits;
class Primop_head;
class Primop_tail;
class Eid;
class Estring;
class Intsize1;
class Intsize_;
class Intsizefixed1;
class Intsizefixed_;
class Eint;
class ListModule;
class ListPort;
class ListField;
class ListReader;
class ListWriter;
class ListReadwriter;
class ListStmt;
class ListExp;
class ListInt;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitCircuit(Circuit *p) = 0;
  virtual void visitModule(Module *p) = 0;
  virtual void visitPort(Port *p) = 0;
  virtual void visitDir(Dir *p) = 0;
  virtual void visitType(Type *p) = 0;
  virtual void visitField(Field *p) = 0;
  virtual void visitFlipliteral(Flipliteral *p) = 0;
  virtual void visitStmt(Stmt *p) = 0;
  virtual void visitReader(Reader *p) = 0;
  virtual void visitWriter(Writer *p) = 0;
  virtual void visitReadwriter(Readwriter *p) = 0;
  virtual void visitColonid(Colonid *p) = 0;
  virtual void visitElsestmt(Elsestmt *p) = 0;
  virtual void visitWithreset(Withreset *p) = 0;
  virtual void visitRuw(Ruw *p) = 0;
  virtual void visitInfo(Info *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitPrimop(Primop *p) = 0;
  virtual void visitId(Id *p) = 0;
  virtual void visitSString(SString *p) = 0;
  virtual void visitIntsize(Intsize *p) = 0;
  virtual void visitIntsizefixed(Intsizefixed *p) = 0;
  virtual void visitInt(Int *p) = 0;
  virtual void visitECircuit(ECircuit *p) = 0;
  virtual void visitModule1(Module1 *p) = 0;
  virtual void visitModule2(Module2 *p) = 0;
  virtual void visitEPort(EPort *p) = 0;
  virtual void visitDir_input(Dir_input *p) = 0;
  virtual void visitDir_output(Dir_output *p) = 0;
  virtual void visitType1(Type1 *p) = 0;
  virtual void visitType2(Type2 *p) = 0;
  virtual void visitType3(Type3 *p) = 0;
  virtual void visitType_Clock(Type_Clock *p) = 0;
  virtual void visitType4(Type4 *p) = 0;
  virtual void visitType5(Type5 *p) = 0;
  virtual void visitType6(Type6 *p) = 0;
  virtual void visitEField(EField *p) = 0;
  virtual void visitFlipliteral_flip(Flipliteral_flip *p) = 0;
  virtual void visitFlipliteral_(Flipliteral_ *p) = 0;
  virtual void visitStmt1(Stmt1 *p) = 0;
  virtual void visitStmt2(Stmt2 *p) = 0;
  virtual void visitStmt3(Stmt3 *p) = 0;
  virtual void visitStmt4(Stmt4 *p) = 0;
  virtual void visitStmt5(Stmt5 *p) = 0;
  virtual void visitStmt6(Stmt6 *p) = 0;
  virtual void visitStmt7(Stmt7 *p) = 0;
  virtual void visitStmt8(Stmt8 *p) = 0;
  virtual void visitStmt9(Stmt9 *p) = 0;
  virtual void visitStmt10(Stmt10 *p) = 0;
  virtual void visitStmt11(Stmt11 *p) = 0;
  virtual void visitStmt12(Stmt12 *p) = 0;
  virtual void visitStmt13(Stmt13 *p) = 0;
  virtual void visitStmt14(Stmt14 *p) = 0;
  virtual void visitEReader(EReader *p) = 0;
  virtual void visitEWriter(EWriter *p) = 0;
  virtual void visitEReadWriter(EReadWriter *p) = 0;
  virtual void visitColonid1(Colonid1 *p) = 0;
  virtual void visitColonid_(Colonid_ *p) = 0;
  virtual void visitElsestmt1(Elsestmt1 *p) = 0;
  virtual void visitElsestmt_(Elsestmt_ *p) = 0;
  virtual void visitWithreset1(Withreset1 *p) = 0;
  virtual void visitWithreset_(Withreset_ *p) = 0;
  virtual void visitRuw_old(Ruw_old *p) = 0;
  virtual void visitRuw_new(Ruw_new *p) = 0;
  virtual void visitRuw_undefined(Ruw_undefined *p) = 0;
  virtual void visitInfo1(Info1 *p) = 0;
  virtual void visitInfo_(Info_ *p) = 0;
  virtual void visitExp1(Exp1 *p) = 0;
  virtual void visitExp2(Exp2 *p) = 0;
  virtual void visitExp3(Exp3 *p) = 0;
  virtual void visitExp4(Exp4 *p) = 0;
  virtual void visitExpId(ExpId *p) = 0;
  virtual void visitExp5(Exp5 *p) = 0;
  virtual void visitExp6(Exp6 *p) = 0;
  virtual void visitExp7(Exp7 *p) = 0;
  virtual void visitExp8(Exp8 *p) = 0;
  virtual void visitExp9(Exp9 *p) = 0;
  virtual void visitExp10(Exp10 *p) = 0;
  virtual void visitPrimop_add(Primop_add *p) = 0;
  virtual void visitPrimop_sub(Primop_sub *p) = 0;
  virtual void visitPrimop_mul(Primop_mul *p) = 0;
  virtual void visitPrimop_div(Primop_div *p) = 0;
  virtual void visitPrimop_mod(Primop_mod *p) = 0;
  virtual void visitPrimop_lt(Primop_lt *p) = 0;
  virtual void visitPrimop_leq(Primop_leq *p) = 0;
  virtual void visitPrimop_gt(Primop_gt *p) = 0;
  virtual void visitPrimop_geq(Primop_geq *p) = 0;
  virtual void visitPrimop_eq(Primop_eq *p) = 0;
  virtual void visitPrimop_neq(Primop_neq *p) = 0;
  virtual void visitPrimop_pad(Primop_pad *p) = 0;
  virtual void visitPrimop_asUInt(Primop_asUInt *p) = 0;
  virtual void visitPrimop_asSInt(Primop_asSInt *p) = 0;
  virtual void visitPrimop_asClock(Primop_asClock *p) = 0;
  virtual void visitPrimop_shl(Primop_shl *p) = 0;
  virtual void visitPrimop_shr(Primop_shr *p) = 0;
  virtual void visitPrimop_dshl(Primop_dshl *p) = 0;
  virtual void visitPrimop_dshr(Primop_dshr *p) = 0;
  virtual void visitPrimop_cvt(Primop_cvt *p) = 0;
  virtual void visitPrimop_neg(Primop_neg *p) = 0;
  virtual void visitPrimop_not(Primop_not *p) = 0;
  virtual void visitPrimop_and(Primop_and *p) = 0;
  virtual void visitPrimop_or(Primop_or *p) = 0;
  virtual void visitPrimop_xor(Primop_xor *p) = 0;
  virtual void visitPrimop_andr(Primop_andr *p) = 0;
  virtual void visitPrimop_orr(Primop_orr *p) = 0;
  virtual void visitPrimop_xorr(Primop_xorr *p) = 0;
  virtual void visitPrimop_cat(Primop_cat *p) = 0;
  virtual void visitPrimop_bits(Primop_bits *p) = 0;
  virtual void visitPrimop_head(Primop_head *p) = 0;
  virtual void visitPrimop_tail(Primop_tail *p) = 0;
  virtual void visitEid(Eid *p) = 0;
  virtual void visitEstring(Estring *p) = 0;
  virtual void visitIntsize1(Intsize1 *p) = 0;
  virtual void visitIntsize_(Intsize_ *p) = 0;
  virtual void visitIntsizefixed1(Intsizefixed1 *p) = 0;
  virtual void visitIntsizefixed_(Intsizefixed_ *p) = 0;
  virtual void visitEint(Eint *p) = 0;
  virtual void visitListModule(ListModule *p) = 0;
  virtual void visitListPort(ListPort *p) = 0;
  virtual void visitListField(ListField *p) = 0;
  virtual void visitListReader(ListReader *p) = 0;
  virtual void visitListWriter(ListWriter *p) = 0;
  virtual void visitListReadwriter(ListReadwriter *p) = 0;
  virtual void visitListStmt(ListStmt *p) = 0;
  virtual void visitListExp(ListExp *p) = 0;
  virtual void visitListInt(ListInt *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Circuit : public Visitable
{
public:
  virtual Circuit *clone() const = 0;

};

class Module : public Visitable
{
public:
  virtual Module *clone() const = 0;

};

class Port : public Visitable
{
public:
  virtual Port *clone() const = 0;

};

class Dir : public Visitable
{
public:
  virtual Dir *clone() const = 0;

};

class Type : public Visitable
{
public:
  virtual Type *clone() const = 0;

};

class Field : public Visitable
{
public:
  virtual Field *clone() const = 0;

};

class Flipliteral : public Visitable
{
public:
  virtual Flipliteral *clone() const = 0;

};

class Stmt : public Visitable
{
public:
  virtual Stmt *clone() const = 0;

};

class Reader : public Visitable
{
public:
  virtual Reader *clone() const = 0;

};

class Writer : public Visitable
{
public:
  virtual Writer *clone() const = 0;

};

class Readwriter : public Visitable
{
public:
  virtual Readwriter *clone() const = 0;

};

class Colonid : public Visitable
{
public:
  virtual Colonid *clone() const = 0;

};

class Elsestmt : public Visitable
{
public:
  virtual Elsestmt *clone() const = 0;

};

class Withreset : public Visitable
{
public:
  virtual Withreset *clone() const = 0;

};

class Ruw : public Visitable
{
public:
  virtual Ruw *clone() const = 0;

};

class Info : public Visitable
{
public:
  virtual Info *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class Primop : public Visitable
{
public:
  virtual Primop *clone() const = 0;

};

class Id : public Visitable
{
public:
  virtual Id *clone() const = 0;

};

class SString : public Visitable
{
public:
  virtual SString *clone() const = 0;

};

class Intsize : public Visitable
{
public:
  virtual Intsize *clone() const = 0;

};

class Intsizefixed : public Visitable
{
public:
  virtual Intsizefixed *clone() const = 0;

};

class Int : public Visitable
{
public:
  virtual Int *clone() const = 0;

};



class ECircuit : public Circuit
{
public:
  Id *id_;
  Info *info_;
  ListModule *listmodule_;

  ECircuit(const ECircuit &);
  ECircuit &operator=(const ECircuit &);
  ECircuit(Id *p1, Info *p2, ListModule *p3);
  ~ECircuit();
  virtual void accept(Visitor *v);
  virtual ECircuit *clone() const;
  void swap(ECircuit &);
};

class Module1 : public Module
{
public:
  Id *id_;
  Info *info_;
  ListPort *listport_;
  Stmt *stmt_;

  Module1(const Module1 &);
  Module1 &operator=(const Module1 &);
  Module1(Id *p1, Info *p2, ListPort *p3, Stmt *p4);
  ~Module1();
  virtual void accept(Visitor *v);
  virtual Module1 *clone() const;
  void swap(Module1 &);
};

class Module2 : public Module
{
public:
  Id *id_;
  Info *info_;
  ListPort *listport_;

  Module2(const Module2 &);
  Module2 &operator=(const Module2 &);
  Module2(Id *p1, Info *p2, ListPort *p3);
  ~Module2();
  virtual void accept(Visitor *v);
  virtual Module2 *clone() const;
  void swap(Module2 &);
};

class EPort : public Port
{
public:
  Dir *dir_;
  Id *id_;
  Type *type_;
  Info *info_;

  EPort(const EPort &);
  EPort &operator=(const EPort &);
  EPort(Dir *p1, Id *p2, Type *p3, Info *p4);
  ~EPort();
  virtual void accept(Visitor *v);
  virtual EPort *clone() const;
  void swap(EPort &);
};

class Dir_input : public Dir
{
public:

  Dir_input(const Dir_input &);
  Dir_input &operator=(const Dir_input &);
  Dir_input();
  ~Dir_input();
  virtual void accept(Visitor *v);
  virtual Dir_input *clone() const;
  void swap(Dir_input &);
};

class Dir_output : public Dir
{
public:

  Dir_output(const Dir_output &);
  Dir_output &operator=(const Dir_output &);
  Dir_output();
  ~Dir_output();
  virtual void accept(Visitor *v);
  virtual Dir_output *clone() const;
  void swap(Dir_output &);
};

class Type1 : public Type
{
public:
  Intsize *intsize_;

  Type1(const Type1 &);
  Type1 &operator=(const Type1 &);
  Type1(Intsize *p1);
  ~Type1();
  virtual void accept(Visitor *v);
  virtual Type1 *clone() const;
  void swap(Type1 &);
};

class Type2 : public Type
{
public:
  Intsize *intsize_;

  Type2(const Type2 &);
  Type2 &operator=(const Type2 &);
  Type2(Intsize *p1);
  ~Type2();
  virtual void accept(Visitor *v);
  virtual Type2 *clone() const;
  void swap(Type2 &);
};

class Type3 : public Type
{
public:
  Intsize *intsize_;
  Intsizefixed *intsizefixed_;

  Type3(const Type3 &);
  Type3 &operator=(const Type3 &);
  Type3(Intsize *p1, Intsizefixed *p2);
  ~Type3();
  virtual void accept(Visitor *v);
  virtual Type3 *clone() const;
  void swap(Type3 &);
};

class Type_Clock : public Type
{
public:

  Type_Clock(const Type_Clock &);
  Type_Clock &operator=(const Type_Clock &);
  Type_Clock();
  ~Type_Clock();
  virtual void accept(Visitor *v);
  virtual Type_Clock *clone() const;
  void swap(Type_Clock &);
};

class Type4 : public Type
{
public:
  Intsize *intsize_;

  Type4(const Type4 &);
  Type4 &operator=(const Type4 &);
  Type4(Intsize *p1);
  ~Type4();
  virtual void accept(Visitor *v);
  virtual Type4 *clone() const;
  void swap(Type4 &);
};

class Type5 : public Type
{
public:
  ListField *listfield_;

  Type5(const Type5 &);
  Type5 &operator=(const Type5 &);
  Type5(ListField *p1);
  ~Type5();
  virtual void accept(Visitor *v);
  virtual Type5 *clone() const;
  void swap(Type5 &);
};

class Type6 : public Type
{
public:
  Type *type_;
  Int *int_;

  Type6(const Type6 &);
  Type6 &operator=(const Type6 &);
  Type6(Type *p1, Int *p2);
  ~Type6();
  virtual void accept(Visitor *v);
  virtual Type6 *clone() const;
  void swap(Type6 &);
};

class EField : public Field
{
public:
  Flipliteral *flipliteral_;
  Id *id_;
  Type *type_;

  EField(const EField &);
  EField &operator=(const EField &);
  EField(Flipliteral *p1, Id *p2, Type *p3);
  ~EField();
  virtual void accept(Visitor *v);
  virtual EField *clone() const;
  void swap(EField &);
};

class Flipliteral_flip : public Flipliteral
{
public:

  Flipliteral_flip(const Flipliteral_flip &);
  Flipliteral_flip &operator=(const Flipliteral_flip &);
  Flipliteral_flip();
  ~Flipliteral_flip();
  virtual void accept(Visitor *v);
  virtual Flipliteral_flip *clone() const;
  void swap(Flipliteral_flip &);
};

class Flipliteral_ : public Flipliteral
{
public:

  Flipliteral_(const Flipliteral_ &);
  Flipliteral_ &operator=(const Flipliteral_ &);
  Flipliteral_();
  ~Flipliteral_();
  virtual void accept(Visitor *v);
  virtual Flipliteral_ *clone() const;
  void swap(Flipliteral_ &);
};

class Stmt1 : public Stmt
{
public:
  Id *id_;
  Type *type_;
  Info *info_;

  Stmt1(const Stmt1 &);
  Stmt1 &operator=(const Stmt1 &);
  Stmt1(Id *p1, Type *p2, Info *p3);
  ~Stmt1();
  virtual void accept(Visitor *v);
  virtual Stmt1 *clone() const;
  void swap(Stmt1 &);
};

class Stmt2 : public Stmt
{
public:
  Id *id_;
  Type *type_;
  Exp *exp_;
  Withreset *withreset_;
  Info *info_;

  Stmt2(const Stmt2 &);
  Stmt2 &operator=(const Stmt2 &);
  Stmt2(Id *p1, Type *p2, Exp *p3, Withreset *p4, Info *p5);
  ~Stmt2();
  virtual void accept(Visitor *v);
  virtual Stmt2 *clone() const;
  void swap(Stmt2 &);
};

class Stmt3 : public Stmt
{
public:
  Id *id_;
  Info *info_;
  Type *type_;
  Int *int_1;
  Int *int_2;
  Int *int_3;
  Ruw *ruw_;
  ListReader *listreader_;
  ListWriter *listwriter_;
  ListReadwriter *listreadwriter_;

  Stmt3(const Stmt3 &);
  Stmt3 &operator=(const Stmt3 &);
  Stmt3(Id *p1, Info *p2, Type *p3, Int *p4, Int *p5, Int *p6, Ruw *p7, ListReader *p8, ListWriter *p9, ListReadwriter *p10);
  ~Stmt3();
  virtual void accept(Visitor *v);
  virtual Stmt3 *clone() const;
  void swap(Stmt3 &);
};

class Stmt4 : public Stmt
{
public:
  Id *id_1;
  Id *id_2;
  Info *info_;

  Stmt4(const Stmt4 &);
  Stmt4 &operator=(const Stmt4 &);
  Stmt4(Id *p1, Id *p2, Info *p3);
  ~Stmt4();
  virtual void accept(Visitor *v);
  virtual Stmt4 *clone() const;
  void swap(Stmt4 &);
};

class Stmt5 : public Stmt
{
public:
  Id *id_;
  Exp *exp_;
  Info *info_;

  Stmt5(const Stmt5 &);
  Stmt5 &operator=(const Stmt5 &);
  Stmt5(Id *p1, Exp *p2, Info *p3);
  ~Stmt5();
  virtual void accept(Visitor *v);
  virtual Stmt5 *clone() const;
  void swap(Stmt5 &);
};

class Stmt6 : public Stmt
{
public:
  Exp *exp_1;
  Exp *exp_2;
  Info *info_;

  Stmt6(const Stmt6 &);
  Stmt6 &operator=(const Stmt6 &);
  Stmt6(Exp *p1, Exp *p2, Info *p3);
  ~Stmt6();
  virtual void accept(Visitor *v);
  virtual Stmt6 *clone() const;
  void swap(Stmt6 &);
};

class Stmt7 : public Stmt
{
public:
  Exp *exp_1;
  Exp *exp_2;
  Info *info_;

  Stmt7(const Stmt7 &);
  Stmt7 &operator=(const Stmt7 &);
  Stmt7(Exp *p1, Exp *p2, Info *p3);
  ~Stmt7();
  virtual void accept(Visitor *v);
  virtual Stmt7 *clone() const;
  void swap(Stmt7 &);
};

class Stmt8 : public Stmt
{
public:
  Exp *exp_;
  Info *info_;

  Stmt8(const Stmt8 &);
  Stmt8 &operator=(const Stmt8 &);
  Stmt8(Exp *p1, Info *p2);
  ~Stmt8();
  virtual void accept(Visitor *v);
  virtual Stmt8 *clone() const;
  void swap(Stmt8 &);
};

class Stmt9 : public Stmt
{
public:
  ListExp *listexp_;
  Info *info_;

  Stmt9(const Stmt9 &);
  Stmt9 &operator=(const Stmt9 &);
  Stmt9(ListExp *p1, Info *p2);
  ~Stmt9();
  virtual void accept(Visitor *v);
  virtual Stmt9 *clone() const;
  void swap(Stmt9 &);
};

class Stmt10 : public Stmt
{
public:
  Exp *exp_;
  Info *info_;
  Stmt *stmt_;
  Elsestmt *elsestmt_;

  Stmt10(const Stmt10 &);
  Stmt10 &operator=(const Stmt10 &);
  Stmt10(Exp *p1, Info *p2, Stmt *p3, Elsestmt *p4);
  ~Stmt10();
  virtual void accept(Visitor *v);
  virtual Stmt10 *clone() const;
  void swap(Stmt10 &);
};

class Stmt11 : public Stmt
{
public:
  Exp *exp_1;
  Exp *exp_2;
  Int *int_;
  Colonid *colonid_;
  Info *info_;

  Stmt11(const Stmt11 &);
  Stmt11 &operator=(const Stmt11 &);
  Stmt11(Exp *p1, Exp *p2, Int *p3, Colonid *p4, Info *p5);
  ~Stmt11();
  virtual void accept(Visitor *v);
  virtual Stmt11 *clone() const;
  void swap(Stmt11 &);
};

class Stmt12 : public Stmt
{
public:
  Exp *exp_1;
  Exp *exp_2;
  SString *sstring_;
  ListExp *listexp_;
  Colonid *colonid_;
  Info *info_;

  Stmt12(const Stmt12 &);
  Stmt12 &operator=(const Stmt12 &);
  Stmt12(Exp *p1, Exp *p2, SString *p3, ListExp *p4, Colonid *p5, Info *p6);
  ~Stmt12();
  virtual void accept(Visitor *v);
  virtual Stmt12 *clone() const;
  void swap(Stmt12 &);
};

class Stmt13 : public Stmt
{
public:
  Info *info_;

  Stmt13(const Stmt13 &);
  Stmt13 &operator=(const Stmt13 &);
  Stmt13(Info *p1);
  ~Stmt13();
  virtual void accept(Visitor *v);
  virtual Stmt13 *clone() const;
  void swap(Stmt13 &);
};

class Stmt14 : public Stmt
{
public:
  ListStmt *liststmt_;

  Stmt14(const Stmt14 &);
  Stmt14 &operator=(const Stmt14 &);
  Stmt14(ListStmt *p1);
  ~Stmt14();
  virtual void accept(Visitor *v);
  virtual Stmt14 *clone() const;
  void swap(Stmt14 &);
};

class EReader : public Reader
{
public:
  Id *id_;

  EReader(const EReader &);
  EReader &operator=(const EReader &);
  EReader(Id *p1);
  ~EReader();
  virtual void accept(Visitor *v);
  virtual EReader *clone() const;
  void swap(EReader &);
};

class EWriter : public Writer
{
public:
  Id *id_;

  EWriter(const EWriter &);
  EWriter &operator=(const EWriter &);
  EWriter(Id *p1);
  ~EWriter();
  virtual void accept(Visitor *v);
  virtual EWriter *clone() const;
  void swap(EWriter &);
};

class EReadWriter : public Readwriter
{
public:
  Id *id_;

  EReadWriter(const EReadWriter &);
  EReadWriter &operator=(const EReadWriter &);
  EReadWriter(Id *p1);
  ~EReadWriter();
  virtual void accept(Visitor *v);
  virtual EReadWriter *clone() const;
  void swap(EReadWriter &);
};

class Colonid1 : public Colonid
{
public:
  Id *id_;

  Colonid1(const Colonid1 &);
  Colonid1 &operator=(const Colonid1 &);
  Colonid1(Id *p1);
  ~Colonid1();
  virtual void accept(Visitor *v);
  virtual Colonid1 *clone() const;
  void swap(Colonid1 &);
};

class Colonid_ : public Colonid
{
public:

  Colonid_(const Colonid_ &);
  Colonid_ &operator=(const Colonid_ &);
  Colonid_();
  ~Colonid_();
  virtual void accept(Visitor *v);
  virtual Colonid_ *clone() const;
  void swap(Colonid_ &);
};

class Elsestmt1 : public Elsestmt
{
public:
  Stmt *stmt_;

  Elsestmt1(const Elsestmt1 &);
  Elsestmt1 &operator=(const Elsestmt1 &);
  Elsestmt1(Stmt *p1);
  ~Elsestmt1();
  virtual void accept(Visitor *v);
  virtual Elsestmt1 *clone() const;
  void swap(Elsestmt1 &);
};

class Elsestmt_ : public Elsestmt
{
public:

  Elsestmt_(const Elsestmt_ &);
  Elsestmt_ &operator=(const Elsestmt_ &);
  Elsestmt_();
  ~Elsestmt_();
  virtual void accept(Visitor *v);
  virtual Elsestmt_ *clone() const;
  void swap(Elsestmt_ &);
};

class Withreset1 : public Withreset
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Withreset1(const Withreset1 &);
  Withreset1 &operator=(const Withreset1 &);
  Withreset1(Exp *p1, Exp *p2);
  ~Withreset1();
  virtual void accept(Visitor *v);
  virtual Withreset1 *clone() const;
  void swap(Withreset1 &);
};

class Withreset_ : public Withreset
{
public:

  Withreset_(const Withreset_ &);
  Withreset_ &operator=(const Withreset_ &);
  Withreset_();
  ~Withreset_();
  virtual void accept(Visitor *v);
  virtual Withreset_ *clone() const;
  void swap(Withreset_ &);
};

class Ruw_old : public Ruw
{
public:

  Ruw_old(const Ruw_old &);
  Ruw_old &operator=(const Ruw_old &);
  Ruw_old();
  ~Ruw_old();
  virtual void accept(Visitor *v);
  virtual Ruw_old *clone() const;
  void swap(Ruw_old &);
};

class Ruw_new : public Ruw
{
public:

  Ruw_new(const Ruw_new &);
  Ruw_new &operator=(const Ruw_new &);
  Ruw_new();
  ~Ruw_new();
  virtual void accept(Visitor *v);
  virtual Ruw_new *clone() const;
  void swap(Ruw_new &);
};

class Ruw_undefined : public Ruw
{
public:

  Ruw_undefined(const Ruw_undefined &);
  Ruw_undefined &operator=(const Ruw_undefined &);
  Ruw_undefined();
  ~Ruw_undefined();
  virtual void accept(Visitor *v);
  virtual Ruw_undefined *clone() const;
  void swap(Ruw_undefined &);
};

class Info1 : public Info
{
public:
  SString *sstring_;

  Info1(const Info1 &);
  Info1 &operator=(const Info1 &);
  Info1(SString *p1);
  ~Info1();
  virtual void accept(Visitor *v);
  virtual Info1 *clone() const;
  void swap(Info1 &);
};

class Info_ : public Info
{
public:

  Info_(const Info_ &);
  Info_ &operator=(const Info_ &);
  Info_();
  ~Info_();
  virtual void accept(Visitor *v);
  virtual Info_ *clone() const;
  void swap(Info_ &);
};

class Exp1 : public Exp
{
public:
  Intsize *intsize_;
  Int *int_;

  Exp1(const Exp1 &);
  Exp1 &operator=(const Exp1 &);
  Exp1(Intsize *p1, Int *p2);
  ~Exp1();
  virtual void accept(Visitor *v);
  virtual Exp1 *clone() const;
  void swap(Exp1 &);
};

class Exp2 : public Exp
{
public:
  Intsize *intsize_;
  SString *sstring_;

  Exp2(const Exp2 &);
  Exp2 &operator=(const Exp2 &);
  Exp2(Intsize *p1, SString *p2);
  ~Exp2();
  virtual void accept(Visitor *v);
  virtual Exp2 *clone() const;
  void swap(Exp2 &);
};

class Exp3 : public Exp
{
public:
  Intsize *intsize_;
  Int *int_;

  Exp3(const Exp3 &);
  Exp3 &operator=(const Exp3 &);
  Exp3(Intsize *p1, Int *p2);
  ~Exp3();
  virtual void accept(Visitor *v);
  virtual Exp3 *clone() const;
  void swap(Exp3 &);
};

class Exp4 : public Exp
{
public:
  Intsize *intsize_;
  SString *sstring_;

  Exp4(const Exp4 &);
  Exp4 &operator=(const Exp4 &);
  Exp4(Intsize *p1, SString *p2);
  ~Exp4();
  virtual void accept(Visitor *v);
  virtual Exp4 *clone() const;
  void swap(Exp4 &);
};

class ExpId : public Exp
{
public:
  Id *id_;

  ExpId(const ExpId &);
  ExpId &operator=(const ExpId &);
  ExpId(Id *p1);
  ~ExpId();
  virtual void accept(Visitor *v);
  virtual ExpId *clone() const;
  void swap(ExpId &);
};

class Exp5 : public Exp
{
public:
  Exp *exp_;
  Id *id_;

  Exp5(const Exp5 &);
  Exp5 &operator=(const Exp5 &);
  Exp5(Exp *p1, Id *p2);
  ~Exp5();
  virtual void accept(Visitor *v);
  virtual Exp5 *clone() const;
  void swap(Exp5 &);
};

class Exp6 : public Exp
{
public:
  Exp *exp_;
  Int *int_;

  Exp6(const Exp6 &);
  Exp6 &operator=(const Exp6 &);
  Exp6(Exp *p1, Int *p2);
  ~Exp6();
  virtual void accept(Visitor *v);
  virtual Exp6 *clone() const;
  void swap(Exp6 &);
};

class Exp7 : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Exp7(const Exp7 &);
  Exp7 &operator=(const Exp7 &);
  Exp7(Exp *p1, Exp *p2);
  ~Exp7();
  virtual void accept(Visitor *v);
  virtual Exp7 *clone() const;
  void swap(Exp7 &);
};

class Exp8 : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;
  Exp *exp_3;

  Exp8(const Exp8 &);
  Exp8 &operator=(const Exp8 &);
  Exp8(Exp *p1, Exp *p2, Exp *p3);
  ~Exp8();
  virtual void accept(Visitor *v);
  virtual Exp8 *clone() const;
  void swap(Exp8 &);
};

class Exp9 : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Exp9(const Exp9 &);
  Exp9 &operator=(const Exp9 &);
  Exp9(Exp *p1, Exp *p2);
  ~Exp9();
  virtual void accept(Visitor *v);
  virtual Exp9 *clone() const;
  void swap(Exp9 &);
};

class Exp10 : public Exp
{
public:
  Primop *primop_;
  ListExp *listexp_;
  ListInt *listint_;

  Exp10(const Exp10 &);
  Exp10 &operator=(const Exp10 &);
  Exp10(Primop *p1, ListExp *p2, ListInt *p3);
  ~Exp10();
  virtual void accept(Visitor *v);
  virtual Exp10 *clone() const;
  void swap(Exp10 &);
};

class Primop_add : public Primop
{
public:

  Primop_add(const Primop_add &);
  Primop_add &operator=(const Primop_add &);
  Primop_add();
  ~Primop_add();
  virtual void accept(Visitor *v);
  virtual Primop_add *clone() const;
  void swap(Primop_add &);
};

class Primop_sub : public Primop
{
public:

  Primop_sub(const Primop_sub &);
  Primop_sub &operator=(const Primop_sub &);
  Primop_sub();
  ~Primop_sub();
  virtual void accept(Visitor *v);
  virtual Primop_sub *clone() const;
  void swap(Primop_sub &);
};

class Primop_mul : public Primop
{
public:

  Primop_mul(const Primop_mul &);
  Primop_mul &operator=(const Primop_mul &);
  Primop_mul();
  ~Primop_mul();
  virtual void accept(Visitor *v);
  virtual Primop_mul *clone() const;
  void swap(Primop_mul &);
};

class Primop_div : public Primop
{
public:

  Primop_div(const Primop_div &);
  Primop_div &operator=(const Primop_div &);
  Primop_div();
  ~Primop_div();
  virtual void accept(Visitor *v);
  virtual Primop_div *clone() const;
  void swap(Primop_div &);
};

class Primop_mod : public Primop
{
public:

  Primop_mod(const Primop_mod &);
  Primop_mod &operator=(const Primop_mod &);
  Primop_mod();
  ~Primop_mod();
  virtual void accept(Visitor *v);
  virtual Primop_mod *clone() const;
  void swap(Primop_mod &);
};

class Primop_lt : public Primop
{
public:

  Primop_lt(const Primop_lt &);
  Primop_lt &operator=(const Primop_lt &);
  Primop_lt();
  ~Primop_lt();
  virtual void accept(Visitor *v);
  virtual Primop_lt *clone() const;
  void swap(Primop_lt &);
};

class Primop_leq : public Primop
{
public:

  Primop_leq(const Primop_leq &);
  Primop_leq &operator=(const Primop_leq &);
  Primop_leq();
  ~Primop_leq();
  virtual void accept(Visitor *v);
  virtual Primop_leq *clone() const;
  void swap(Primop_leq &);
};

class Primop_gt : public Primop
{
public:

  Primop_gt(const Primop_gt &);
  Primop_gt &operator=(const Primop_gt &);
  Primop_gt();
  ~Primop_gt();
  virtual void accept(Visitor *v);
  virtual Primop_gt *clone() const;
  void swap(Primop_gt &);
};

class Primop_geq : public Primop
{
public:

  Primop_geq(const Primop_geq &);
  Primop_geq &operator=(const Primop_geq &);
  Primop_geq();
  ~Primop_geq();
  virtual void accept(Visitor *v);
  virtual Primop_geq *clone() const;
  void swap(Primop_geq &);
};

class Primop_eq : public Primop
{
public:

  Primop_eq(const Primop_eq &);
  Primop_eq &operator=(const Primop_eq &);
  Primop_eq();
  ~Primop_eq();
  virtual void accept(Visitor *v);
  virtual Primop_eq *clone() const;
  void swap(Primop_eq &);
};

class Primop_neq : public Primop
{
public:

  Primop_neq(const Primop_neq &);
  Primop_neq &operator=(const Primop_neq &);
  Primop_neq();
  ~Primop_neq();
  virtual void accept(Visitor *v);
  virtual Primop_neq *clone() const;
  void swap(Primop_neq &);
};

class Primop_pad : public Primop
{
public:

  Primop_pad(const Primop_pad &);
  Primop_pad &operator=(const Primop_pad &);
  Primop_pad();
  ~Primop_pad();
  virtual void accept(Visitor *v);
  virtual Primop_pad *clone() const;
  void swap(Primop_pad &);
};

class Primop_asUInt : public Primop
{
public:

  Primop_asUInt(const Primop_asUInt &);
  Primop_asUInt &operator=(const Primop_asUInt &);
  Primop_asUInt();
  ~Primop_asUInt();
  virtual void accept(Visitor *v);
  virtual Primop_asUInt *clone() const;
  void swap(Primop_asUInt &);
};

class Primop_asSInt : public Primop
{
public:

  Primop_asSInt(const Primop_asSInt &);
  Primop_asSInt &operator=(const Primop_asSInt &);
  Primop_asSInt();
  ~Primop_asSInt();
  virtual void accept(Visitor *v);
  virtual Primop_asSInt *clone() const;
  void swap(Primop_asSInt &);
};

class Primop_asClock : public Primop
{
public:

  Primop_asClock(const Primop_asClock &);
  Primop_asClock &operator=(const Primop_asClock &);
  Primop_asClock();
  ~Primop_asClock();
  virtual void accept(Visitor *v);
  virtual Primop_asClock *clone() const;
  void swap(Primop_asClock &);
};

class Primop_shl : public Primop
{
public:

  Primop_shl(const Primop_shl &);
  Primop_shl &operator=(const Primop_shl &);
  Primop_shl();
  ~Primop_shl();
  virtual void accept(Visitor *v);
  virtual Primop_shl *clone() const;
  void swap(Primop_shl &);
};

class Primop_shr : public Primop
{
public:

  Primop_shr(const Primop_shr &);
  Primop_shr &operator=(const Primop_shr &);
  Primop_shr();
  ~Primop_shr();
  virtual void accept(Visitor *v);
  virtual Primop_shr *clone() const;
  void swap(Primop_shr &);
};

class Primop_dshl : public Primop
{
public:

  Primop_dshl(const Primop_dshl &);
  Primop_dshl &operator=(const Primop_dshl &);
  Primop_dshl();
  ~Primop_dshl();
  virtual void accept(Visitor *v);
  virtual Primop_dshl *clone() const;
  void swap(Primop_dshl &);
};

class Primop_dshr : public Primop
{
public:

  Primop_dshr(const Primop_dshr &);
  Primop_dshr &operator=(const Primop_dshr &);
  Primop_dshr();
  ~Primop_dshr();
  virtual void accept(Visitor *v);
  virtual Primop_dshr *clone() const;
  void swap(Primop_dshr &);
};

class Primop_cvt : public Primop
{
public:

  Primop_cvt(const Primop_cvt &);
  Primop_cvt &operator=(const Primop_cvt &);
  Primop_cvt();
  ~Primop_cvt();
  virtual void accept(Visitor *v);
  virtual Primop_cvt *clone() const;
  void swap(Primop_cvt &);
};

class Primop_neg : public Primop
{
public:

  Primop_neg(const Primop_neg &);
  Primop_neg &operator=(const Primop_neg &);
  Primop_neg();
  ~Primop_neg();
  virtual void accept(Visitor *v);
  virtual Primop_neg *clone() const;
  void swap(Primop_neg &);
};

class Primop_not : public Primop
{
public:

  Primop_not(const Primop_not &);
  Primop_not &operator=(const Primop_not &);
  Primop_not();
  ~Primop_not();
  virtual void accept(Visitor *v);
  virtual Primop_not *clone() const;
  void swap(Primop_not &);
};

class Primop_and : public Primop
{
public:

  Primop_and(const Primop_and &);
  Primop_and &operator=(const Primop_and &);
  Primop_and();
  ~Primop_and();
  virtual void accept(Visitor *v);
  virtual Primop_and *clone() const;
  void swap(Primop_and &);
};

class Primop_or : public Primop
{
public:

  Primop_or(const Primop_or &);
  Primop_or &operator=(const Primop_or &);
  Primop_or();
  ~Primop_or();
  virtual void accept(Visitor *v);
  virtual Primop_or *clone() const;
  void swap(Primop_or &);
};

class Primop_xor : public Primop
{
public:

  Primop_xor(const Primop_xor &);
  Primop_xor &operator=(const Primop_xor &);
  Primop_xor();
  ~Primop_xor();
  virtual void accept(Visitor *v);
  virtual Primop_xor *clone() const;
  void swap(Primop_xor &);
};

class Primop_andr : public Primop
{
public:

  Primop_andr(const Primop_andr &);
  Primop_andr &operator=(const Primop_andr &);
  Primop_andr();
  ~Primop_andr();
  virtual void accept(Visitor *v);
  virtual Primop_andr *clone() const;
  void swap(Primop_andr &);
};

class Primop_orr : public Primop
{
public:

  Primop_orr(const Primop_orr &);
  Primop_orr &operator=(const Primop_orr &);
  Primop_orr();
  ~Primop_orr();
  virtual void accept(Visitor *v);
  virtual Primop_orr *clone() const;
  void swap(Primop_orr &);
};

class Primop_xorr : public Primop
{
public:

  Primop_xorr(const Primop_xorr &);
  Primop_xorr &operator=(const Primop_xorr &);
  Primop_xorr();
  ~Primop_xorr();
  virtual void accept(Visitor *v);
  virtual Primop_xorr *clone() const;
  void swap(Primop_xorr &);
};

class Primop_cat : public Primop
{
public:

  Primop_cat(const Primop_cat &);
  Primop_cat &operator=(const Primop_cat &);
  Primop_cat();
  ~Primop_cat();
  virtual void accept(Visitor *v);
  virtual Primop_cat *clone() const;
  void swap(Primop_cat &);
};

class Primop_bits : public Primop
{
public:

  Primop_bits(const Primop_bits &);
  Primop_bits &operator=(const Primop_bits &);
  Primop_bits();
  ~Primop_bits();
  virtual void accept(Visitor *v);
  virtual Primop_bits *clone() const;
  void swap(Primop_bits &);
};

class Primop_head : public Primop
{
public:

  Primop_head(const Primop_head &);
  Primop_head &operator=(const Primop_head &);
  Primop_head();
  ~Primop_head();
  virtual void accept(Visitor *v);
  virtual Primop_head *clone() const;
  void swap(Primop_head &);
};

class Primop_tail : public Primop
{
public:

  Primop_tail(const Primop_tail &);
  Primop_tail &operator=(const Primop_tail &);
  Primop_tail();
  ~Primop_tail();
  virtual void accept(Visitor *v);
  virtual Primop_tail *clone() const;
  void swap(Primop_tail &);
};

class Eid : public Id
{
public:
  Ident ident_;

  Eid(const Eid &);
  Eid &operator=(const Eid &);
  Eid(Ident p1);
  ~Eid();
  virtual void accept(Visitor *v);
  virtual Eid *clone() const;
  void swap(Eid &);
};

class Estring : public SString
{
public:
  String string_;

  Estring(const Estring &);
  Estring &operator=(const Estring &);
  Estring(String p1);
  ~Estring();
  virtual void accept(Visitor *v);
  virtual Estring *clone() const;
  void swap(Estring &);
};

class Intsize1 : public Intsize
{
public:
  Int *int_;

  Intsize1(const Intsize1 &);
  Intsize1 &operator=(const Intsize1 &);
  Intsize1(Int *p1);
  ~Intsize1();
  virtual void accept(Visitor *v);
  virtual Intsize1 *clone() const;
  void swap(Intsize1 &);
};

class Intsize_ : public Intsize
{
public:

  Intsize_(const Intsize_ &);
  Intsize_ &operator=(const Intsize_ &);
  Intsize_();
  ~Intsize_();
  virtual void accept(Visitor *v);
  virtual Intsize_ *clone() const;
  void swap(Intsize_ &);
};

class Intsizefixed1 : public Intsizefixed
{
public:
  Int *int_;

  Intsizefixed1(const Intsizefixed1 &);
  Intsizefixed1 &operator=(const Intsizefixed1 &);
  Intsizefixed1(Int *p1);
  ~Intsizefixed1();
  virtual void accept(Visitor *v);
  virtual Intsizefixed1 *clone() const;
  void swap(Intsizefixed1 &);
};

class Intsizefixed_ : public Intsizefixed
{
public:

  Intsizefixed_(const Intsizefixed_ &);
  Intsizefixed_ &operator=(const Intsizefixed_ &);
  Intsizefixed_();
  ~Intsizefixed_();
  virtual void accept(Visitor *v);
  virtual Intsizefixed_ *clone() const;
  void swap(Intsizefixed_ &);
};

class Eint : public Int
{
public:
  Integer integer_;

  Eint(const Eint &);
  Eint &operator=(const Eint &);
  Eint(Integer p1);
  ~Eint();
  virtual void accept(Visitor *v);
  virtual Eint *clone() const;
  void swap(Eint &);
};



class ListModule : public Visitable, public std::vector<Module*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListModule *clone() const;
};

class ListPort : public Visitable, public std::vector<Port*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListPort *clone() const;
};

class ListField : public Visitable, public std::vector<Field*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListField *clone() const;
};

class ListReader : public Visitable, public std::vector<Reader*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListReader *clone() const;
};

class ListWriter : public Visitable, public std::vector<Writer*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListWriter *clone() const;
};

class ListReadwriter : public Visitable, public std::vector<Readwriter*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListReadwriter *clone() const;
};

class ListStmt : public Visitable, public std::vector<Stmt*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStmt *clone() const;
};

class ListExp : public Visitable, public std::vector<Exp*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExp *clone() const;
};

class ListInt : public Visitable, public std::vector<Int*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListInt *clone() const;
};


}
#endif
